{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10211,"databundleVersionId":111096,"isSourceIdPinned":false,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# Final Corrected Implementation\nimport numpy as np\nimport pandas as pd\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, FunctionTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import train_test_split\n\n# Load data\ntrain = pd.read_csv('/kaggle/input/home-data-for-ml-course/train.csv')\ntest = pd.read_csv('/kaggle/input/home-data-for-ml-course/test.csv')\n\n# Prepare data\ny_train = np.log1p(train['SalePrice'])\nX_train = train.drop(['Id', 'SalePrice'], axis=1)\nX_test = test.drop('Id', axis=1)\n\n\n# Split the original train.csv into training and validation sets\nX_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n    X_train, y_train, test_size=0.2, random_state=42\n)\n\n# Custom imputer that preserves Neighborhood column\nclass NeighborhoodImputer(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        self.neighborhood_medians_ = X.groupby('Neighborhood')['LotFrontage'].median()\n        return self\n    \n    def transform(self, X):\n        X = X.copy()\n        if 'LotFrontage' in X.columns:\n            X['LotFrontage'] = X.groupby('Neighborhood')['LotFrontage'].transform(\n                lambda x: x.fillna(self.neighborhood_medians_[x.name]))\n        return X\n\n# Feature engineering function\ndef engineer_features(X):\n    # If X is not a DataFrame, convert it.\n    # We know that the numeric pipeline is applied on numeric_features + ['LotFrontage']\n    if not isinstance(X, pd.DataFrame):\n        X = pd.DataFrame(X, columns=numeric_features + ['LotFrontage'])\n    X['TotalSF'] = X['TotalBsmtSF'] + X['1stFlrSF'] + X['2ndFlrSF']\n    X['TotalBath'] = (X['FullBath'] + 0.5 * X['HalfBath'] +\n                      X['BsmtFullBath'] + 0.5 * X['BsmtHalfBath'])\n    X['Age'] = X['YrSold'] - X['YearBuilt']\n    print(X.head())\n    return X\n\n# Define preprocessing steps\nnumeric_features = X_train.select_dtypes(include=['number']).columns.drop('LotFrontage').tolist()\ncategorical_features = X_train.select_dtypes(include=['object']).columns.tolist()\n\n# Main pipeline\nmain_pipeline = Pipeline([\n    # Step 1: Neighborhood-based imputation (needs both numeric and categorical columns)\n    ('neighborhood_imputer', NeighborhoodImputer()),\n    \n    # Step 2: Column-wise processing\n    ('processing', ColumnTransformer([\n        # Numeric features\n        ('num', Pipeline([\n             ('knn_imputer', KNNImputer(n_neighbors=5)),\n             ('log_transform', FunctionTransformer(np.log1p, validate=False)),\n            ('feature_eng', FunctionTransformer(engineer_features))\n        ]), numeric_features + ['LotFrontage']),\n        \n        # Categorical features\n        ('cat', Pipeline([\n            ('imputer', SimpleImputer(strategy='most_frequent')),\n            ('onehot', OneHotEncoder(handle_unknown='ignore'))\n        ]), categorical_features)\n    ])),\n    \n    # Final estimator\n    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n])\n# Train and predict\nmain_pipeline.fit(X_train_split, y_train_split)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:20:03.201483Z","iopub.execute_input":"2025-03-26T04:20:03.201860Z","iopub.status.idle":"2025-03-26T04:20:13.150702Z","shell.execute_reply.started":"2025-03-26T04:20:03.201835Z","shell.execute_reply":"2025-03-26T04:20:13.149744Z"}},"outputs":[{"name":"stdout","text":"   MSSubClass   LotArea  OverallQual  OverallCond  YearBuilt  YearRemodAdd  \\\n0    3.044522  9.036106     1.791759     1.945910   7.579679      7.579679   \n1    4.110874  8.966739     1.945910     2.079442   7.597898      7.598399   \n2    3.433987  9.080004     1.791759     2.079442   7.555382      7.576097   \n3    3.931826  8.881975     1.791759     2.079442   7.569412      7.576097   \n4    3.931826  8.517393     1.791759     1.945910   7.562681      7.576097   \n\n   MasVnrArea  BsmtFinSF1  BsmtFinSF2  BsmtUnfSF  ...  3SsnPorch  ScreenPorch  \\\n0    0.000000    6.827629         0.0   5.973810  ...        0.0          0.0   \n1    0.000000    0.000000         0.0   6.684612  ...        0.0          0.0   \n2    0.000000    0.000000         0.0   6.680855  ...        0.0          0.0   \n3    5.533389    6.345636         0.0   5.093750  ...        0.0          0.0   \n4    0.000000    5.389072         0.0   6.695799  ...        0.0          0.0   \n\n   PoolArea  MiscVal    MoSold    YrSold  LotFrontage    TotalSF  TotalBath  \\\n0       0.0      0.0  1.945910  7.606387     4.262680  14.363184   1.386294   \n1       0.0      0.0  1.791759  7.605890     4.094345  20.019503   1.445186   \n2       0.0      0.0  1.791759  7.605392     4.219508  13.361709   0.693147   \n3       0.0      0.0  1.945910  7.604894     4.110874  20.154870   1.732868   \n4       0.0      0.0  1.791759  7.606387     3.931826  20.370084   1.098612   \n\n        Age  \n0  0.026709  \n1  0.007992  \n2  0.050010  \n3  0.035483  \n4  0.043706  \n\n[5 rows x 39 columns]\n","output_type":"stream"},{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('neighborhood_imputer', NeighborhoodImputer()),\n                ('processing',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('knn_imputer',\n                                                                   KNNImputer()),\n                                                                  ('log_transform',\n                                                                   FunctionTransformer(func=<ufunc 'log1p'>)),\n                                                                  ('feature_eng',\n                                                                   FunctionTransformer(func=<function engineer_features at 0x7f29081a5360>))]),\n                                                  ['MSSubClass', 'LotArea',\n                                                   'OverallQual', 'Ove...\n                                                   'LotConfig', 'LandSlope',\n                                                   'Neighborhood', 'Condition1',\n                                                   'Condition2', 'BldgType',\n                                                   'HouseStyle', 'RoofStyle',\n                                                   'RoofMatl', 'Exterior1st',\n                                                   'Exterior2nd', 'MasVnrType',\n                                                   'ExterQual', 'ExterCond',\n                                                   'Foundation', 'BsmtQual',\n                                                   'BsmtCond', 'BsmtExposure',\n                                                   'BsmtFinType1',\n                                                   'BsmtFinType2', 'Heating',\n                                                   'HeatingQC', 'CentralAir',\n                                                   'Electrical', ...])])),\n                ('regressor', RandomForestRegressor(random_state=42))])","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;neighborhood_imputer&#x27;, NeighborhoodImputer()),\n                (&#x27;processing&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;knn_imputer&#x27;,\n                                                                   KNNImputer()),\n                                                                  (&#x27;log_transform&#x27;,\n                                                                   FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;)),\n                                                                  (&#x27;feature_eng&#x27;,\n                                                                   FunctionTransformer(func=&lt;function engineer_features at 0x7f29081a5360&gt;))]),\n                                                  [&#x27;MSSubClass&#x27;, &#x27;LotArea&#x27;,\n                                                   &#x27;OverallQual&#x27;, &#x27;Ove...\n                                                   &#x27;LotConfig&#x27;, &#x27;LandSlope&#x27;,\n                                                   &#x27;Neighborhood&#x27;, &#x27;Condition1&#x27;,\n                                                   &#x27;Condition2&#x27;, &#x27;BldgType&#x27;,\n                                                   &#x27;HouseStyle&#x27;, &#x27;RoofStyle&#x27;,\n                                                   &#x27;RoofMatl&#x27;, &#x27;Exterior1st&#x27;,\n                                                   &#x27;Exterior2nd&#x27;, &#x27;MasVnrType&#x27;,\n                                                   &#x27;ExterQual&#x27;, &#x27;ExterCond&#x27;,\n                                                   &#x27;Foundation&#x27;, &#x27;BsmtQual&#x27;,\n                                                   &#x27;BsmtCond&#x27;, &#x27;BsmtExposure&#x27;,\n                                                   &#x27;BsmtFinType1&#x27;,\n                                                   &#x27;BsmtFinType2&#x27;, &#x27;Heating&#x27;,\n                                                   &#x27;HeatingQC&#x27;, &#x27;CentralAir&#x27;,\n                                                   &#x27;Electrical&#x27;, ...])])),\n                (&#x27;regressor&#x27;, RandomForestRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;neighborhood_imputer&#x27;, NeighborhoodImputer()),\n                (&#x27;processing&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;knn_imputer&#x27;,\n                                                                   KNNImputer()),\n                                                                  (&#x27;log_transform&#x27;,\n                                                                   FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;)),\n                                                                  (&#x27;feature_eng&#x27;,\n                                                                   FunctionTransformer(func=&lt;function engineer_features at 0x7f29081a5360&gt;))]),\n                                                  [&#x27;MSSubClass&#x27;, &#x27;LotArea&#x27;,\n                                                   &#x27;OverallQual&#x27;, &#x27;Ove...\n                                                   &#x27;LotConfig&#x27;, &#x27;LandSlope&#x27;,\n                                                   &#x27;Neighborhood&#x27;, &#x27;Condition1&#x27;,\n                                                   &#x27;Condition2&#x27;, &#x27;BldgType&#x27;,\n                                                   &#x27;HouseStyle&#x27;, &#x27;RoofStyle&#x27;,\n                                                   &#x27;RoofMatl&#x27;, &#x27;Exterior1st&#x27;,\n                                                   &#x27;Exterior2nd&#x27;, &#x27;MasVnrType&#x27;,\n                                                   &#x27;ExterQual&#x27;, &#x27;ExterCond&#x27;,\n                                                   &#x27;Foundation&#x27;, &#x27;BsmtQual&#x27;,\n                                                   &#x27;BsmtCond&#x27;, &#x27;BsmtExposure&#x27;,\n                                                   &#x27;BsmtFinType1&#x27;,\n                                                   &#x27;BsmtFinType2&#x27;, &#x27;Heating&#x27;,\n                                                   &#x27;HeatingQC&#x27;, &#x27;CentralAir&#x27;,\n                                                   &#x27;Electrical&#x27;, ...])])),\n                (&#x27;regressor&#x27;, RandomForestRegressor(random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">NeighborhoodImputer</label><div class=\"sk-toggleable__content\"><pre>NeighborhoodImputer()</pre></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">processing: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;knn_imputer&#x27;, KNNImputer()),\n                                                 (&#x27;log_transform&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;)),\n                                                 (&#x27;feature_eng&#x27;,\n                                                  FunctionTransformer(func=&lt;function engineer_features at 0x7f29081a5360&gt;))]),\n                                 [&#x27;MSSubClass&#x27;, &#x27;LotArea&#x27;, &#x27;OverallQual&#x27;,\n                                  &#x27;OverallCond&#x27;, &#x27;YearBuilt&#x27;, &#x27;YearRemodAdd&#x27;,\n                                  &#x27;MasVnrArea&#x27;, &#x27;BsmtFinSF1&#x27;, &#x27;BsmtFinSF2&#x27;,\n                                  &#x27;...\n                                 [&#x27;MSZoning&#x27;, &#x27;Street&#x27;, &#x27;Alley&#x27;, &#x27;LotShape&#x27;,\n                                  &#x27;LandContour&#x27;, &#x27;Utilities&#x27;, &#x27;LotConfig&#x27;,\n                                  &#x27;LandSlope&#x27;, &#x27;Neighborhood&#x27;, &#x27;Condition1&#x27;,\n                                  &#x27;Condition2&#x27;, &#x27;BldgType&#x27;, &#x27;HouseStyle&#x27;,\n                                  &#x27;RoofStyle&#x27;, &#x27;RoofMatl&#x27;, &#x27;Exterior1st&#x27;,\n                                  &#x27;Exterior2nd&#x27;, &#x27;MasVnrType&#x27;, &#x27;ExterQual&#x27;,\n                                  &#x27;ExterCond&#x27;, &#x27;Foundation&#x27;, &#x27;BsmtQual&#x27;,\n                                  &#x27;BsmtCond&#x27;, &#x27;BsmtExposure&#x27;, &#x27;BsmtFinType1&#x27;,\n                                  &#x27;BsmtFinType2&#x27;, &#x27;Heating&#x27;, &#x27;HeatingQC&#x27;,\n                                  &#x27;CentralAir&#x27;, &#x27;Electrical&#x27;, ...])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;MSSubClass&#x27;, &#x27;LotArea&#x27;, &#x27;OverallQual&#x27;, &#x27;OverallCond&#x27;, &#x27;YearBuilt&#x27;, &#x27;YearRemodAdd&#x27;, &#x27;MasVnrArea&#x27;, &#x27;BsmtFinSF1&#x27;, &#x27;BsmtFinSF2&#x27;, &#x27;BsmtUnfSF&#x27;, &#x27;TotalBsmtSF&#x27;, &#x27;1stFlrSF&#x27;, &#x27;2ndFlrSF&#x27;, &#x27;LowQualFinSF&#x27;, &#x27;GrLivArea&#x27;, &#x27;BsmtFullBath&#x27;, &#x27;BsmtHalfBath&#x27;, &#x27;FullBath&#x27;, &#x27;HalfBath&#x27;, &#x27;BedroomAbvGr&#x27;, &#x27;KitchenAbvGr&#x27;, &#x27;TotRmsAbvGrd&#x27;, &#x27;Fireplaces&#x27;, &#x27;GarageYrBlt&#x27;, &#x27;GarageCars&#x27;, &#x27;GarageArea&#x27;, &#x27;WoodDeckSF&#x27;, &#x27;OpenPorchSF&#x27;, &#x27;EnclosedPorch&#x27;, &#x27;3SsnPorch&#x27;, &#x27;ScreenPorch&#x27;, &#x27;PoolArea&#x27;, &#x27;MiscVal&#x27;, &#x27;MoSold&#x27;, &#x27;YrSold&#x27;, &#x27;LotFrontage&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNNImputer</label><div class=\"sk-toggleable__content\"><pre>KNNImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" ><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;function engineer_features at 0x7f29081a5360&gt;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" ><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;MSZoning&#x27;, &#x27;Street&#x27;, &#x27;Alley&#x27;, &#x27;LotShape&#x27;, &#x27;LandContour&#x27;, &#x27;Utilities&#x27;, &#x27;LotConfig&#x27;, &#x27;LandSlope&#x27;, &#x27;Neighborhood&#x27;, &#x27;Condition1&#x27;, &#x27;Condition2&#x27;, &#x27;BldgType&#x27;, &#x27;HouseStyle&#x27;, &#x27;RoofStyle&#x27;, &#x27;RoofMatl&#x27;, &#x27;Exterior1st&#x27;, &#x27;Exterior2nd&#x27;, &#x27;MasVnrType&#x27;, &#x27;ExterQual&#x27;, &#x27;ExterCond&#x27;, &#x27;Foundation&#x27;, &#x27;BsmtQual&#x27;, &#x27;BsmtCond&#x27;, &#x27;BsmtExposure&#x27;, &#x27;BsmtFinType1&#x27;, &#x27;BsmtFinType2&#x27;, &#x27;Heating&#x27;, &#x27;HeatingQC&#x27;, &#x27;CentralAir&#x27;, &#x27;Electrical&#x27;, &#x27;KitchenQual&#x27;, &#x27;Functional&#x27;, &#x27;FireplaceQu&#x27;, &#x27;GarageType&#x27;, &#x27;GarageFinish&#x27;, &#x27;GarageQual&#x27;, &#x27;GarageCond&#x27;, &#x27;PavedDrive&#x27;, &#x27;PoolQC&#x27;, &#x27;Fence&#x27;, &#x27;MiscFeature&#x27;, &#x27;SaleType&#x27;, &#x27;SaleCondition&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"test_preds = main_pipeline.predict(X_test)\nfinal_preds = np.expm1(test_preds)\n\n# Create submission\nsubmission = pd.DataFrame({\n    'Id': test['Id'],\n    'SalePrice': final_preds\n})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:01:25.337351Z","iopub.execute_input":"2025-03-26T04:01:25.337655Z","iopub.status.idle":"2025-03-26T04:01:25.434638Z","shell.execute_reply.started":"2025-03-26T04:01:25.337629Z","shell.execute_reply":"2025-03-26T04:01:25.433652Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# Tests And Metrics","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\nimport pandas as pd\n\n# Split the original dataset into training and validation sets\nX_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n    X_train, y_train, test_size=0.2, random_state=42\n)\n\n# Debugging intermediate steps with training split\nimputed_data = main_pipeline.named_steps['neighborhood_imputer'].transform(X_train_split)\nprint(imputed_data[['Neighborhood', 'LotFrontage']].head())\n\nprocessed_data = main_pipeline.named_steps['processing'].transform(X_train_split)\nprint(processed_data.shape)  # Validate transformed shape\nprint(processed_data)        # Print sparse matrix output\n\n# Convert sparse matrix to dense format for debugging\nprocessed_dense = processed_data.toarray()\nprint(pd.DataFrame(processed_dense).head())  # Display dense matrix as DataFrame\n\n# Cross-validation on training split\nscores = cross_val_score(main_pipeline, X_train_split, y_train_split, \n                         cv=5, scoring='neg_mean_squared_error')\nrmse_scores = np.sqrt(-scores)\nprint(f\"Cross-Validation RMSE: {rmse_scores.mean():.4f} (±{rmse_scores.std():.4f})\")\n\n# Fit the pipeline and evaluate performance on validation data\nmain_pipeline.fit(X_train_split, y_train_split)\n\n# Predict on validation set\nval_preds = main_pipeline.predict(X_val_split)\nval_preds_exp = np.expm1(val_preds)  # Undo log transformation\ny_val_exp = np.expm1(y_val_split)\n\n# Calculate RMSE for validation set\nrmse_val = np.sqrt(mean_squared_error(y_val_exp, val_preds_exp))\nprint(f\"Validation RMSE: {rmse_val:.4f}\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:01:25.436359Z","iopub.execute_input":"2025-03-26T04:01:25.436675Z","iopub.status.idle":"2025-03-26T04:02:10.415159Z","shell.execute_reply.started":"2025-03-26T04:01:25.436650Z","shell.execute_reply":"2025-03-26T04:02:10.414075Z"}},"outputs":[{"name":"stdout","text":"     Neighborhood  LotFrontage\n254         NAmes         70.0\n1066      Gilbert         59.0\n638       Edwards         67.0\n799         SWISU         60.0\n380         SWISU         50.0\n(1168, 288)\n  (0, 0)\t3.044522437723423\n  (0, 1)\t9.036106025364846\n  (0, 2)\t1.791759469228055\n  (0, 3)\t1.9459101490553132\n  (0, 4)\t7.579678823090456\n  (0, 5)\t7.579678823090456\n  (0, 7)\t6.827629234502852\n  (0, 9)\t5.973809611869261\n  (0, 10)\t7.181591944611865\n  (0, 11)\t7.181591944611865\n  (0, 14)\t7.181591944611865\n  (0, 15)\t0.6931471805599453\n  (0, 17)\t0.6931471805599453\n  (0, 19)\t1.3862943611198906\n  (0, 20)\t0.6931471805599453\n  (0, 21)\t1.791759469228055\n  (0, 23)\t7.579678823090456\n  (0, 24)\t0.6931471805599453\n  (0, 25)\t5.68697535633982\n  (0, 26)\t5.5254529391317835\n  (0, 33)\t1.9459101490553132\n  (0, 34)\t7.606387389772652\n  (0, 35)\t4.2626798770413155\n  (0, 36)\t14.36318388922373\n  (0, 37)\t1.3862943611198906\n  :\t:\n  (1167, 170)\t1.0\n  (1167, 176)\t1.0\n  (1167, 179)\t1.0\n  (1167, 185)\t1.0\n  (1167, 190)\t1.0\n  (1167, 194)\t1.0\n  (1167, 200)\t1.0\n  (1167, 206)\t1.0\n  (1167, 208)\t1.0\n  (1167, 213)\t1.0\n  (1167, 219)\t1.0\n  (1167, 223)\t1.0\n  (1167, 226)\t1.0\n  (1167, 234)\t1.0\n  (1167, 239)\t1.0\n  (1167, 241)\t1.0\n  (1167, 246)\t1.0\n  (1167, 253)\t1.0\n  (1167, 258)\t1.0\n  (1167, 261)\t1.0\n  (1167, 262)\t1.0\n  (1167, 267)\t1.0\n  (1167, 271)\t1.0\n  (1167, 281)\t1.0\n  (1167, 286)\t1.0\n        0         1         2         3         4         5         6    \\\n0  3.044522  9.036106  1.791759  1.945910  7.579679  7.579679  0.000000   \n1  4.110874  8.966739  1.945910  2.079442  7.597898  7.598399  0.000000   \n2  3.433987  9.080004  1.791759  2.079442  7.555382  7.576097  0.000000   \n3  3.931826  8.881975  1.791759  2.079442  7.569412  7.576097  5.533389   \n4  3.931826  8.517393  1.791759  1.945910  7.562681  7.576097  0.000000   \n\n        7    8         9    ...  278  279  280  281  282  283  284  285  286  \\\n0  6.827629  0.0  5.973810  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n1  0.000000  0.0  6.684612  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n2  0.000000  0.0  6.680855  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n3  6.345636  0.0  5.093750  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n4  5.389072  0.0  6.695799  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n\n   287  \n0  0.0  \n1  0.0  \n2  0.0  \n3  0.0  \n4  0.0  \n\n[5 rows x 288 columns]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\", line 3805, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"index.pyx\", line 167, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 196, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7081, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7089, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Blueste'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_scorer.py\", line 276, in _score\n    y_pred = method_caller(estimator, \"predict\", X)\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n    return getattr(estimator, method)(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\", line 480, in predict\n    Xt = transform.transform(Xt)\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_set_output.py\", line 140, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n  File \"<ipython-input-20-64fed4ba29d0>\", line 41, in transform\n    X['LotFrontage'] = X.groupby('Neighborhood')['LotFrontage'].transform(\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/groupby/generic.py\", line 517, in transform\n    return self._transform(\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/groupby/groupby.py\", line 2021, in _transform\n    return self._transform_general(func, engine, engine_kwargs, *args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/groupby/generic.py\", line 557, in _transform_general\n    res = func(group, *args, **kwargs)\n  File \"<ipython-input-20-64fed4ba29d0>\", line 42, in <lambda>\n    lambda x: x.fillna(self.neighborhood_medians_[x.name]))\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\", line 1121, in __getitem__\n    return self._get_value(key)\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\", line 1237, in _get_value\n    loc = self.index.get_loc(label)\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\", line 3812, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Blueste'\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-Validation RMSE: nan (±nan)\nValidation RMSE: 29523.5181\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\nimport numpy as np\n\n# Generate predictions for validation set\nval_preds = main_pipeline.predict(X_val_split)\n\n# Undo log1p transformation for comparison\nval_preds_exp = np.expm1(val_preds)\ny_val_exp = np.expm1(y_val_split)\n\n# Calculate RMSE\nrmse_val = np.sqrt(mean_squared_error(y_val_exp, val_preds_exp))\nprint(f\"Validation RMSE: {rmse_val:.4f}\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:02:10.416368Z","iopub.execute_input":"2025-03-26T04:02:10.416742Z","iopub.status.idle":"2025-03-26T04:02:10.466672Z","shell.execute_reply.started":"2025-03-26T04:02:10.416701Z","shell.execute_reply":"2025-03-26T04:02:10.465770Z"}},"outputs":[{"name":"stdout","text":"Validation RMSE: 29523.5181\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nresiduals = y_val_split - np.expm1(y_pred)\nplt.scatter(np.expm1(y_pred), residuals)\nplt.axhline(y=0, color='r', linestyle='--')\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.title('Residual Plot')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:03:28.480610Z","iopub.execute_input":"2025-03-26T04:03:28.480965Z","iopub.status.idle":"2025-03-26T04:03:28.512241Z","shell.execute_reply.started":"2025-03-26T04:03:28.480939Z","shell.execute_reply":"2025-03-26T04:03:28.510798Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-5484b04de148>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mresiduals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_val_split\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpm1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpm1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresiduals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxhline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/common.py\u001b[0m in \u001b[0;36mnew_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36m__sub__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    192\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__sub__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__sub__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 194\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msub\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    195\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__rsub__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   6133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6134\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6135\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIndexOpsMixin\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6136\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_align_for_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malign_asobject\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/base.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   1380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1381\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1382\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marithmetic_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1384\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_construct_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mres_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36marithmetic_op\u001b[0;34m(left, right, op)\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0;31m# error: Argument 1 to \"_na_arithmetic_op\" has incompatible type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         \u001b[0;31m# \"Union[ExtensionArray, ndarray[Any, Any]]\"; expected \"ndarray[Any, Any]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_na_arithmetic_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36m_na_arithmetic_op\u001b[0;34m(left, right, op, is_cmp)\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    219\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m         if not is_cmp and (\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(op, a, b, use_numexpr)\u001b[0m\n\u001b[1;32m    240\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0muse_numexpr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m             \u001b[0;31m# error: \"None\" not callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0m_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m_evaluate_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py\u001b[0m in \u001b[0;36m_evaluate_numexpr\u001b[0;34m(op, op_str, a, b)\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_evaluate_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py\u001b[0m in \u001b[0;36m_evaluate_standard\u001b[0;34m(op, op_str, a, b)\u001b[0m\n\u001b[1;32m     71\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_TEST_MODE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0m_store_test_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (292,) (1459,) "],"ename":"ValueError","evalue":"operands could not be broadcast together with shapes (292,) (1459,) ","output_type":"error"}],"execution_count":26},{"cell_type":"markdown","source":"# Benchmark Against Baselines","metadata":{}},{"cell_type":"code","source":"baseline_pred = [y_train.median()] * len(y_val_split)\nbaseline_rmse = np.sqrt(mean_squared_error(y_val_split, baseline_pred))\nprint(f\"Baseline RMSE: {baseline_rmse:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:03:58.243933Z","iopub.execute_input":"2025-03-26T04:03:58.244324Z","iopub.status.idle":"2025-03-26T04:03:58.250609Z","shell.execute_reply.started":"2025-03-26T04:03:58.244295Z","shell.execute_reply":"2025-03-26T04:03:58.249537Z"}},"outputs":[{"name":"stdout","text":"Baseline RMSE: 0.4320\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"residuals = np.expm1(y_val_split) - np.expm1(val_preds)\nplt.scatter(np.expm1(val_preds), residuals)\nplt.axhline(y=0, color='r', linestyle='--')\nplt.xlabel('Predicted Prices')\nplt.ylabel('Residuals')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:04:05.479297Z","iopub.execute_input":"2025-03-26T04:04:05.479648Z","iopub.status.idle":"2025-03-26T04:04:05.882149Z","shell.execute_reply.started":"2025-03-26T04:04:05.479620Z","shell.execute_reply":"2025-03-26T04:04:05.880874Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor col in ['Neighborhood', 'MSZoning']:\n    plt.figure(figsize=(20, 10))\n    sns.histplot(X_train[col], kde=True)\n    plt.title(f'Distribution of {col}')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-26T04:24:02.017767Z","iopub.execute_input":"2025-03-26T04:24:02.018118Z","iopub.status.idle":"2025-03-26T04:24:02.777656Z","shell.execute_reply.started":"2025-03-26T04:24:02.018092Z","shell.execute_reply":"2025-03-26T04:24:02.776621Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1000 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1000 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":39}]}